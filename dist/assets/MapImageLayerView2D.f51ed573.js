var E=Object.defineProperty,A=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var P=Object.getOwnPropertySymbols;var V=Object.prototype.hasOwnProperty,F=Object.prototype.propertyIsEnumerable;var S=(r,e,t)=>e in r?E(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,c=(r,e)=>{for(var t in e||(e={}))V.call(e,t)&&S(r,t,e[t]);if(P)for(var t of P(e))F.call(e,t)&&S(r,t,e[t]);return r},_=(r,e)=>A(r,M(e));import{Z as o,_ as m,cQ as G,a0 as q,e as R,r as g,co as L,cW as Q,s as T,dd as D,j as N}from"./index.3ff546ff.js";import{t as O}from"./BitmapContainer.5c06fb3e.js";import{f as W,u as j}from"./LayerView.47c91d96.js";import{r as z}from"./BaseGraphicContainer.97f86daa.js";import{n as H}from"./HighlightGraphicContainer.7a111c3b.js";import{S as k}from"./ExportStrategy.40cf0ccd.js";import{c as Z}from"./ExportImageParameters.ac1076e6.js";import{s as B,a as J}from"./drapedUtils.f5a3f12a.js";import{t as K,d as X}from"./popupUtils.2d563b2c.js";import{n as Y}from"./floorFilterUtils.98f77688.js";import{i as ee}from"./RefreshableLayerView.3cfbced1.js";import"./WGLContainer.c7170968.js";import"./enums.457e23f9.js";import"./pixelUtils.80c4ed59.js";import"./Container.ad55f2c3.js";import"./VertexArrayObject.9a91988b.js";import"./Texture.858d247e.js";import"./VertexElementDescriptor.0406f2d4.js";import"./enums.84480fc7.js";import"./Utils.33cfd3a8.js";import"./ProgramTemplate.5f082bcc.js";import"./StyleDefinition.809d5a5e.js";import"./config.bd364997.js";import"./GeometryUtils.5ea26345.js";import"./MaterialKey.b19bc923.js";import"./earcut.91e104de.js";import"./CIMSymbolHelper.5d0e1b5b.js";import"./BidiEngine.b9926823.js";import"./GeometryUtils.e53da643.js";import"./projectionSupport.e062c89b.js";import"./json.da51edc4.js";import"./FeatureContainer.c5d7f45e.js";import"./TileContainer.41b26253.js";import"./visualVariablesUtils.ff249699.js";import"./visualVariablesUtils.d0321657.js";import"./Matcher.4abd8850.js";import"./tileUtils.7eab3de8.js";import"./TileClipper.c1924ae7.js";import"./Geometry.e891c191.js";import"./ExpandedCIM.3532769c.js";import"./quantizationUtils.bf322bbd.js";import"./devEnvironmentUtils.f51567b1.js";import"./schemaUtils.9b7bfa65.js";import"./createSymbolSchema.5a108c22.js";import"./MD5.67d7a872.js";import"./util.8bcd1f5e.js";import"./ComputedAttributeStorage.e85ca5c7.js";import"./vec3f32.8179e08f.js";import"./Bitmap.39c5932e.js";import"./sublayerUtils.2a4629c1.js";const te=r=>{let e=class extends r{initialize(){this.exportImageParameters=new Z({layer:this.layer})}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null}get exportImageVersion(){var t;return(t=this.exportImageParameters)==null||t.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}async fetchPopupFeatures(t,a){const{layer:h}=this;if(!t)return Promise.reject(new R("mapimagelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:h}));const l=this.get("view.scale"),y=[],f=async i=>{const p=i.minScale===0||l<=i.minScale,s=i.maxScale===0||l>=i.maxScale;if(i.visible&&p&&s){if(i.sublayers)i.sublayers.forEach(f);else if(i.popupEnabled){const d=X(i,_(c({},a),{defaultPopupTemplateEnabled:!1}));g(d)&&y.unshift({sublayer:i,popupTemplate:d})}}},U=h.sublayers.toArray().reverse().map(f);await Promise.all(U);const $=y.map(async({sublayer:i,popupTemplate:p})=>{await i.load().catch(()=>{});const s=i.createQuery(),d=g(a)?a.event:null,v=B({renderer:i.renderer,event:d}),w=this.createFetchPopupFeaturesQueryGeometry(t,v);if(s.geometry=w,s.outFields=await K(i,p),this.layer.type==="map-image"&&"floors"in this.view){var x,I;const C=(x=this.view)==null||(I=x.floors)==null?void 0:I.clone(),u=Y(C,i);g(u)&&(s.where=s.where?`(${s.where}) AND (${u})`:u)}const b=await this._loadArcadeModules(p);return b&&b.arcadeUtils.hasGeometryOperations(p)||(s.maxAllowableOffset=w.width/v),(await i.queryFeatures(s)).features});return(await L($)).reduce((i,p)=>p.value?[...i,...p.value]:i,[]).filter(i=>i!=null)}canResume(){var t;return!!super.canResume()&&((t=this.timeExtent)==null||!t.isEmpty)}_loadArcadeModules(t){if(t.get("expressionInfos.length")||Array.isArray(t.content)&&t.content.some(a=>a.type==="expression"))return Q()}};return o([m()],e.prototype,"exportImageParameters",void 0),o([m({readOnly:!0})],e.prototype,"exportImageVersion",null),o([m()],e.prototype,"layer",void 0),o([m()],e.prototype,"suspended",void 0),o([m(G)],e.prototype,"timeExtent",void 0),e=o([q("esri.views.layers.MapImageLayerView")],e),e},re=T.getLogger("esri.views.2d.layers.MapImageLayerView2D");let n=class extends te(ee(W(j))){constructor(){super(...arguments),this._highlightGraphics=new D}update(r){this.strategy.update(r).catch(e=>{N(e)||re.error(e)})}attach(){const{imageMaxWidth:r,imageMaxHeight:e,version:t}=this.layer,a=t>=10.3,h=t>=10;this._bitmapContainer=new O,this.container.addChild(this._bitmapContainer);const l=new z({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new H(this.view.featuresTilingScheme)});this.container.addChild(l.container),this.strategy=new k({container:this._bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:r,imageMaxHeight:e,imageRotationSupported:a,imageNormalizationSupported:h,hidpi:!0}),this.handles.add(this.watch("exportImageVersion",()=>this.requestUpdate()),"exportImageVersion"),this.handles.add(this.watch("view.floors",()=>this.requestUpdate()),"view.floors"),this.requestUpdate()}detach(){this.handles.remove("exportImageVersion"),this.handles.remove("view.floors"),this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}highlight(r,e){return this._highlightGraphics.add(r),{remove:()=>{this._highlightGraphics.remove(r)}}}supportsSpatialReference(r){return this.layer.serviceSupportsSpatialReference(r)}createFetchPopupFeaturesQueryGeometry(r,e){return J(r,e,this.view)}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(r,e,t,a){return this.layer.fetchImage(r,e,t,c({timeExtent:this.timeExtent,floors:this.view.floors},a))}};o([m()],n.prototype,"strategy",void 0),o([m()],n.prototype,"updating",void 0),n=o([q("esri.views.2d.layers.MapImageLayerView2D")],n);const et=n;export{et as default};
