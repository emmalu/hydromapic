import{K as p,d3 as c,c9 as g,d8 as w,d9 as d,da as m,Z as f,a0 as u}from"./index.3ff546ff.js";import{f as V,u as b}from"./LayerView.47c91d96.js";import{i as S}from"./GraphicContainer.ac774df8.js";import{r as v}from"./BaseGraphicContainer.97f86daa.js";import"./Container.ad55f2c3.js";import"./Utils.33cfd3a8.js";import"./enums.84480fc7.js";import"./enums.457e23f9.js";import"./Texture.858d247e.js";import"./VertexElementDescriptor.0406f2d4.js";import"./CIMSymbolHelper.5d0e1b5b.js";import"./BidiEngine.b9926823.js";import"./MaterialKey.b19bc923.js";import"./GeometryUtils.e53da643.js";import"./projectionSupport.e062c89b.js";import"./json.da51edc4.js";import"./VertexArrayObject.9a91988b.js";import"./FeatureContainer.c5d7f45e.js";import"./TileContainer.41b26253.js";import"./WGLContainer.c7170968.js";import"./pixelUtils.80c4ed59.js";import"./ProgramTemplate.5f082bcc.js";import"./StyleDefinition.809d5a5e.js";import"./config.bd364997.js";import"./GeometryUtils.5ea26345.js";import"./earcut.91e104de.js";import"./visualVariablesUtils.ff249699.js";import"./visualVariablesUtils.d0321657.js";import"./Matcher.4abd8850.js";import"./tileUtils.7eab3de8.js";import"./TileClipper.c1924ae7.js";import"./Geometry.e891c191.js";import"./ExpandedCIM.3532769c.js";import"./quantizationUtils.bf322bbd.js";import"./devEnvironmentUtils.f51567b1.js";import"./schemaUtils.9b7bfa65.js";import"./createSymbolSchema.5a108c22.js";import"./MD5.67d7a872.js";import"./util.8bcd1f5e.js";import"./ComputedAttributeStorage.e85ca5c7.js";import"./vec3f32.8179e08f.js";let l=class extends V(b){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,t){if(!this.graphicsViews.length)return null;const a=this.graphicsViews.reverse().map(i=>i.hitTest(e));return(await Promise.all(a)).flat().filter((i,r)=>(i&&(i.popupTemplate=this._popupTemplates.get(this.graphicsViews[r]),i.layer=this.layer,i.sourceLayer=this.layer),!!i))}update(e){if(this.graphicsViews)for(const t of this.graphicsViews)t.processUpdate(e)}attach(){this.handles.add([p(this.layer,"featureCollections",e=>{this._clear();for(const{popupInfo:t,featureSet:a,layerDefinition:i}of e){const r=c.fromJSON(a),h=new g(r.features),n=i.drawingInfo,y=t?w.fromJSON(t):null,o=d(n.renderer),s=new v({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:h,renderer:o,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[r.geometryType]=s,this._popupTemplates.set(s,y),r.geometryType!=="polygon"||this.layer.polygonSymbol?r.geometryType!=="polyline"||this.layer.lineSymbol?r.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=o.symbol):this.layer.lineSymbol=o.symbol:this.layer.polygonSymbol=o.symbol,this.graphicsViews.push(s),this.container.addChild(s.container)}}),p(this.layer,"polygonSymbol",e=>{this._graphicsViewMap.polygon.renderer=new m({symbol:e})}),p(this.layer,"lineSymbol",e=>{this._graphicsViewMap.polyline.renderer=new m({symbol:e})}),p(this.layer,"pointSymbol",e=>{this._graphicsViewMap.point.renderer=new m({symbol:e})})],"georsslayerview")}detach(){this.handles.remove("georsslayerview"),this._clear()}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};l=f([u("esri.views.2d.layers.GeoRSSLayerView2D")],l);const he=l;export{he as default};
