import{cE as a,d4 as p,r as n,g,cc as m,c9 as l,Z as v,a0 as V}from"./index.3ff546ff.js";import{f as I,u as H}from"./LayerView.47c91d96.js";import{i as b}from"./GraphicContainer.ac774df8.js";import{r as A}from"./BaseGraphicContainer.97f86daa.js";import"./Container.ad55f2c3.js";import"./Utils.33cfd3a8.js";import"./enums.84480fc7.js";import"./enums.457e23f9.js";import"./Texture.858d247e.js";import"./VertexElementDescriptor.0406f2d4.js";import"./CIMSymbolHelper.5d0e1b5b.js";import"./BidiEngine.b9926823.js";import"./MaterialKey.b19bc923.js";import"./GeometryUtils.e53da643.js";import"./projectionSupport.e062c89b.js";import"./json.da51edc4.js";import"./VertexArrayObject.9a91988b.js";import"./FeatureContainer.c5d7f45e.js";import"./TileContainer.41b26253.js";import"./WGLContainer.c7170968.js";import"./pixelUtils.80c4ed59.js";import"./ProgramTemplate.5f082bcc.js";import"./StyleDefinition.809d5a5e.js";import"./config.bd364997.js";import"./GeometryUtils.5ea26345.js";import"./earcut.91e104de.js";import"./visualVariablesUtils.ff249699.js";import"./visualVariablesUtils.d0321657.js";import"./Matcher.4abd8850.js";import"./tileUtils.7eab3de8.js";import"./TileClipper.c1924ae7.js";import"./Geometry.e891c191.js";import"./ExpandedCIM.3532769c.js";import"./quantizationUtils.bf322bbd.js";import"./devEnvironmentUtils.f51567b1.js";import"./schemaUtils.9b7bfa65.js";import"./createSymbolSchema.5a108c22.js";import"./MD5.67d7a872.js";import"./util.8bcd1f5e.js";import"./ComputedAttributeStorage.e85ca5c7.js";import"./vec3f32.8179e08f.js";const c=["routeInfo","directionLines","directionPoints","polygonBarriers","polylineBarriers","pointBarriers","stops"],C=Object.freeze({remove(){},pause(){},resume(){}});let r=class extends I(H){constructor(){super(...arguments),this._graphicsViews=new Map,this._highlightIds=new Map}attach(){for(const i of c)this.handles.add(a(()=>n(this.layer[i])?i==="routeInfo"?[g(this.layer[i])]:g(this.layer[i]).toArray():null,t=>this._createGraphicsView(i,t),p),i)}detach(){this._destroyGraphicsViews()}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof m?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):l.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray()),t=t.filter(s=>s!=null),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):C}async hitTest(i,t){if(this.suspended||!this._graphicsViews.size)return Promise.resolve(null);const s=Array.from(this._graphicsViews.values()).reverse().map(e=>e.hitTest(i)).flat().filter(e=>!!e);for(const e of s)e.layer=this.layer,e.sourceLayer=this.layer;return s}moveStart(){}moveEnd(){}update(i){for(const t of this._graphicsViews.values())t.processUpdate(i)}viewChange(){for(const i of this._graphicsViews.values())i.viewChange()}isUpdating(){for(const i of this._graphicsViews.values())if(i.updating)return!0;return!1}_createGraphicsView(i,t){this._destroyGraphicsView(i);const s=this.view,e=()=>this.requestUpdate(),d=new l(n(t)?t.map(u=>{const{attributes:f,geometry:_,symbol:y,popupInfo:w}=u.toPortalJSON();return m.fromJSON({attributes:f,geometry:_,symbol:y,popupTemplate:w})}):[]),o=new b(s.featuresTilingScheme),h=new A({container:o,graphics:d,requestUpdateCallback:e,view:s});this._graphicsViews.set(i,h),this.container.addChildAt(o,c.indexOf(i)),this._updateHighlight(),this.handles.add([a(()=>h.updating,()=>this.notifyChange("updating"),p)],`updating-${i}`)}_destroyGraphicsView(i){if(!this._graphicsViews.has(i))return;const t=this._graphicsViews.get(i);this.container.removeChild(t.container),t.destroy(),this.handles.remove(`updating-${i}`),this._graphicsViews.delete(i)}_destroyGraphicsViews(){this.container.removeAllChildren();for(const[i,t]of this._graphicsViews.entries())this.handles.remove(i),t.destroy();this._graphicsViews.clear()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const s=this._highlightIds.get(t);this._highlightIds.set(t,s+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const s=this._highlightIds.get(t)-1;s===0?this._highlightIds.delete(t):this._highlightIds.set(t,s)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this._graphicsViews.values())t.setHighlight(i)}};r=v([V("esri.views.2d.layers.RouteLayerView2D")],r);const di=r;export{di as default};
