var K=Object.defineProperty,X=Object.defineProperties;var ee=Object.getOwnPropertyDescriptors;var O=Object.getOwnPropertySymbols;var te=Object.prototype.hasOwnProperty,ie=Object.prototype.propertyIsEnumerable;var j=(r,e,t)=>e in r?K(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,f=(r,e)=>{for(var t in e||(e={}))te.call(e,t)&&j(r,t,e[t]);if(O)for(var t of O(e))ie.call(e,t)&&j(r,t,e[t]);return r},E=(r,e)=>X(r,ee(e));import{s as se,a8 as D,cd as Q,an as H,c1 as I,ce as ne,t as v,cf as ae,D as $,r as T,e as m,bl as C,cg as M,ch as le,ci as q,aU as Z,c9 as oe,cj as re,ck as A,cl as ce,cm as G}from"./index.ab15bc04.js";const F=se.getLogger("esri.layers.support.ElevationSampler");class Y{queryElevation(e){return he(e.clone(),this)}on(){return de}projectIfRequired(e,t){return B(e,t)}}class ue extends Y{constructor(e,t,i){super(),this.tile=e,this.noDataValue=i,this.extent=Q(e.tile.extent,t.spatialReference);const s=I(t.spatialReference),a=t.lodAt(e.tile.level).resolution*s;this.demResolution={min:a,max:a}}get spatialReference(){return this.extent.spatialReference}contains(e){const t=this.projectIfRequired(e,this.spatialReference);return ne(this.extent,t)}elevationAt(e){const t=this.projectIfRequired(e,this.spatialReference);if(v(t))return null;if(!this.contains(e)){const i=this.extent,s=`${i.xmin}, ${i.ymin}, ${i.xmax}, ${i.ymax}`;return F.warn("#elevationAt()",`Point used to sample elevation (${e.x}, ${e.y}) is outside of the sampler extent (${s})`),this.noDataValue}return this.tile.sample(t.x,t.y)}}class P extends Y{constructor(e,t,i){let s;super(),typeof t=="number"?(this.noDataValue=t,s=null):(s=t,this.noDataValue=i),this.samplers=s?e.map(n=>new ue(n,s,this.noDataValue)):e;const a=this.samplers[0];if(a){this.extent=a.extent.clone();const{min:n,max:o}=a.demResolution;this.demResolution={min:n,max:o};for(let l=1;l<this.samplers.length;l++){const c=this.samplers[l];this.extent.union(c.extent),this.demResolution.min=Math.min(this.demResolution.min,c.demResolution.min),this.demResolution.max=Math.max(this.demResolution.max,c.demResolution.max)}}else this.extent=Q(H(),s.spatialReference),this.demResolution={min:0,max:0}}get spatialReference(){return this.extent.spatialReference}elevationAt(e){const t=this.projectIfRequired(e,this.spatialReference);if(!t)return null;for(const i of this.samplers)if(i.contains(t))return i.elevationAt(t);return F.warn("#elevationAt()",`Point used to sample elevation (${e.x}, ${e.y}) is outside of the sampler`),this.noDataValue}}function he(r,e){const t=B(r,e.spatialReference);if(!t)return null;switch(r.type){case"point":pe(r,t,e);break;case"polyline":me(r,t,e);break;case"multipoint":fe(r,t,e)}return r}function B(r,e){if(v(r))return null;const t=r.spatialReference;if(t.equals(e))return r;const i=ae(r,e);return i||F.error(`Cannot project geometry spatial reference (wkid:${t.wkid}) to elevation sampler spatial reference (wkid:${e.wkid})`),i}function pe(r,e,t){r.z=$(t.elevationAt(e),0)}function me(r,e,t){y.spatialReference=e.spatialReference;const i=r.hasM&&!r.hasZ;for(let s=0;s<r.paths.length;s++){const a=r.paths[s],n=e.paths[s];for(let o=0;o<a.length;o++){const l=a[o],c=n[o];y.x=c[0],y.y=c[1],i&&(l[3]=l[2]),l[2]=$(t.elevationAt(y),0)}}r.hasZ=!0}function fe(r,e,t){y.spatialReference=e.spatialReference;const i=r.hasM&&!r.hasZ;for(let s=0;s<r.points.length;s++){const a=r.points[s],n=e.points[s];y.x=n[0],y.y=n[1],i&&(a[3]=a[2]),a[2]=$(t.elevationAt(y),0)}r.hasZ=!0}const y=new D,de={remove(){}};class N{constructor(e,t=null){if(this.tile=e,T(t)){const i=e.extent;this.samplerData={pixelData:t.values,width:t.width,height:t.height,safeWidth:.99999999*(t.width-1),noDataValue:t.noDataValue,dx:(t.width-1)/(i[2]-i[0]),dy:(t.width-1)/(i[3]-i[1]),x0:i[0],y1:i[3]}}}sample(e,t){if(v(this.samplerData))return;const{safeWidth:i,width:s,pixelData:a,noDataValue:n,dx:o,dy:l,y1:c,x0:u}=this.samplerData,h=U(l*(c-t),0,i),d=U(o*(e-u),0,i),p=Math.floor(h),z=Math.floor(d),w=p*s+z,b=w+s,R=a[w],_=a[b],S=a[w+1],V=a[b+1];if(R!==n&&_!==n&&S!==n&&V!==n){const k=d-z,L=R+(S-R)*k;return L+(_+(V-_)*k-L)*(h-p)}}}function U(r,e,t){return r<e?e:r>t?t:r}class ge{async queryAll(e,t,i){if(!(e=i&&i.ignoreInvisibleLayers?e.filter(c=>c.visible):e.slice()).length)throw new m("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");const s=x.fromGeometry(t);let a=!1;i&&i.returnSampleInfo||(a=!0);const n=E(f(f({},g),i),{returnSampleInfo:!0}),o=await this.query(e[e.length-1],s,n),l=await this._queryAllContinue(e,o,n);return l.geometry=l.geometry.export(),a&&delete l.sampleInfo,l}async query(e,t,i){if(!e)throw new m("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!t||!(t instanceof x)&&t.type!=="point"&&t.type!=="multipoint"&&t.type!=="polyline")throw new m("elevation-query:invalid-geometry","Only point, polyline and multipoint geometries can be used to query elevation");const s=f(f({},g),i),a=new ye(e,t.spatialReference,s),n=s.signal;return await e.load({signal:n}),await this._createGeometryDescriptor(a,t,n),await this._selectTiles(a,n),await this._populateElevationTiles(a,n),this._sampleGeometryWithElevation(a),this._createQueryResult(a,n)}async createSampler(e,t,i){if(!e)throw new m("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!t||t.type!=="extent")throw new m("elevation-query:invalid-extent","Invalid or undefined extent");const s=f(f({},g),i);return this._createSampler(e,t,s)}async createSamplerAll(e,t,i){if(!(e=i&&i.ignoreInvisibleLayers?e.filter(n=>n.visible):e.slice()).length)throw new m("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");if(!t||t.type!=="extent")throw new m("elevation-query:invalid-extent","Invalid or undefined extent");const s=E(f(f({},g),i),{returnSampleInfo:!0}),a=await this._createSampler(e[e.length-1],t,s);return this._createSamplerAllContinue(e,t,a,s)}async _createSampler(e,t,i,s){const a=i.signal;await e.load({signal:a});const n=t.spatialReference,o=e.tileInfo.spatialReference;n.equals(o)||(await C([{source:n,dest:o}],{signal:a}),t=M(t,o));const l=new xe(e,t,i,s);return await this._selectTiles(l,a),await this._populateElevationTiles(l,a),new P(l.elevationTiles,l.layer.tileInfo,l.options.noDataValue)}async _createSamplerAllContinue(e,t,i,s){if(e.pop(),!e.length)return i;const a=i.samplers.map(c=>le(c.extent)),n=await this._createSampler(e[e.length-1],t,s,a);if(n.samplers.length===0)return i;const o=i.samplers.concat(n.samplers),l=new P(o,s.noDataValue);return this._createSamplerAllContinue(e,t,l,s)}async _queryAllContinue(e,t,i){const s=e.pop(),a=t.geometry.coordinates,n=[],o=[];for(let u=0;u<a.length;u++){const h=t.sampleInfo[u];h.demResolution>=0?h.source||(h.source=s):e.length&&(n.push(a[u]),o.push(u))}if(!e.length||n.length===0)return t;const l=t.geometry.clone(n),c=await this.query(e[e.length-1],l,i);return o.forEach((u,h)=>{a[u].z=c.geometry.coordinates[h].z,t.sampleInfo[u].demResolution=c.sampleInfo[h].demResolution}),this._queryAllContinue(e,t,i)}async _createQueryResult(e,t){const i={geometry:(await e.geometry.project(e.outSpatialReference,t)).export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(i.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach(s=>{s.tile=null,s.elevationTile=null}),i}async _createGeometryDescriptor(e,t,i){let s;const a=e.layer.tileInfo.spatialReference;if(t instanceof x?s=await t.project(a,i):(await C([{source:t.spatialReference,dest:a}],{signal:i}),s=M(t,a)),!s)throw new m("elevation-query:spatial-reference-mismatch",`Cannot query elevation in '${t.spatialReference.wkid}' on an elevation service in '${a.wkid}'`);e.geometry=x.fromGeometry(s)}async _selectTiles(e,t){const i=e.options.demResolution;if(e.type==="geometry"&&this._preselectOutsideLayerExtent(e),typeof i=="number")this._selectTilesClosestResolution(e);else if(i==="finest-contiguous")await this._selectTilesFinestContiguous(e,t);else{if(i!=="auto")throw new m("elevation-query:invalid-dem-resolution",`Invalid dem resolution value '${i}', expected a number, "finest-contiguous" or "auto"`);await this._selectTilesAuto(e,t)}}_preselectOutsideLayerExtent(e){if(v(e.layer.fullExtent))return;const t=new N(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const i=e.layer.fullExtent;e.geometry.coordinates.forEach(s=>{const a=s.x,n=s.y;(a<i.xmin||a>i.xmax||n<i.ymin||n>i.ymax)&&(s.elevationTile=t)})}_selectTilesClosestResolution(e){const t=e.layer.tileInfo,i=this._findNearestDemResolutionLODIndex(t,e.options.demResolution);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const i=t/I(e.spatialReference);let s=e.lods[0],a=0;for(let n=1;n<e.lods.length;n++){const o=e.lods[n];Math.abs(o.resolution-i)<Math.abs(s.resolution-i)&&(s=o,a=n)}return a}async _selectTilesFinestContiguous(e,t){const i=W(e.layer.tileInfo,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,i,t)}async _selectTilesFinestContiguousAt(e,t,i){const s=e.layer;if(e.selectTilesAtLOD(t),t<0)return;const a=s.tilemapCache,n=e.getTilesToFetch();try{if(a)await q(Promise.all(n.map(o=>a.fetchAvailability(o.level,o.row,o.col,{signal:i}))),i);else if(await this._populateElevationTiles(e,i),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new m("elevation-query:has-unavailable-tiles")}catch(o){Z(o),await this._selectTilesFinestContiguousAt(e,t-1,i)}}async _populateElevationTiles(e,t){const i=e.getTilesToFetch(),s={},a=e.options.cache,n=e.options.noDataValue,o=i.map(async l=>{const c=`${e.layer.uid}:${l.id}:${n}`,u=T(a)?a.get(c):null,h=T(u)?u:await e.layer.fetchTile(l.level,l.row,l.col,{noDataValue:n,signal:t});T(a)&&a.put(c,h),s[l.id]=new N(l,h)});await q(oe(o),t),e.populateElevationTiles(s)}async _selectTilesAuto(e,t){this._selectTilesAutoFinest(e),this._reduceTilesForMaximumRequests(e);const i=e.layer.tilemapCache;if(!i)return this._selectTilesAutoPrefetchUpsample(e,t);const s=e.getTilesToFetch(),a={},n=s.map(async o=>{const l={id:null,level:0,row:0,col:0,extent:H()},c=await re(i.fetchAvailabilityUpsample(o.level,o.row,o.col,l,{signal:t}));c.ok===!1?Z(c.error):a[o.id]=l});await q(Promise.all(n),t),e.remapTiles(a)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const s={},a=l=>{l.id in s?s[l.id]++:(s[l.id]=1,i++)},n=l=>{const c=s[l.id];c===1?(delete s[l.id],i--):s[l.id]=c-1};e.forEachTileToFetch(a,n);let o=!0;for(;o&&(o=!1,e.forEachTileToFetch(l=>{i<=e.options.maximumAutoTileRequests||(n(l),t.upsampleTile(l)&&(o=!0),a(l))},n),o););}_selectTilesAutoFinest(e){const t=W(e.layer.tileInfo,e.options.minDemResolution);e.selectTilesAtLOD(t,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let s=!1;e.forEachTileToFetch((a,n)=>{i.upsampleTile(a)?s=!0:n()}),s&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach(t=>{const i=t.elevationTile;let s=e.options.noDataValue;if(i){const a=i.sample(t.x,t.y);T(a)?s=a:t.elevationTile=null}t.z=s})}_extractSampleInfo(e){const t=e.layer.tileInfo,i=I(t.spatialReference);return e.geometry.coordinates.map(s=>{let a=-1;return s.elevationTile&&s.elevationTile!==e.outsideExtentTile&&(a=t.lodAt(s.elevationTile.tile.level).resolution*i),{demResolution:a}})}}class x{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new x;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map(i=>this._cloneCoordinate(i)),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await C([{source:this.spatialReference,dest:e}],{signal:t});const i=new A({spatialReference:this.spatialReference,points:this.coordinates.map(o=>[o.x,o.y])}),s=M(i,e);if(!s)return null;const a=this.coordinates.map((o,l)=>{const c=this._cloneCoordinate(o),u=s.points[l];return c.x=u[0],c.y=u[1],c}),n=this.clone(a);return n.spatialReference=e,n}_cloneCoordinate(e){return{x:e.x,y:e.y,z:e.z,m:e.m,tile:null,elevationTile:null}}static fromGeometry(e){const t=new x;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof x)t.coordinates=e.coordinates.map(i=>t._cloneCoordinate(i)),t._exporter=(i,s)=>{const a=e.clone(i);return a.spatialReference=s,a};else switch(e.type){case"point":{const i=e,{hasZ:s,hasM:a}=i;t.coordinates=s&&a?[{x:i.x,y:i.y,z:i.z,m:i.m}]:s?[{x:i.x,y:i.y,z:i.z}]:a?[{x:i.x,y:i.y,m:i.m}]:[{x:i.x,y:i.y}],t._exporter=(n,o)=>e.hasM?new D(n[0].x,n[0].y,n[0].z,n[0].m,o):new D(n[0].x,n[0].y,n[0].z,o);break}case"multipoint":{const i=e,{hasZ:s,hasM:a}=i;t.coordinates=s&&a?i.points.map(n=>({x:n[0],y:n[1],z:n[2],m:n[3]})):s?i.points.map(n=>({x:n[0],y:n[1],z:n[2]})):a?i.points.map(n=>({x:n[0],y:n[1],m:n[2]})):i.points.map(n=>({x:n[0],y:n[1]})),t._exporter=(n,o)=>e.hasM?new A({points:n.map(l=>[l.x,l.y,l.z,l.m]),hasZ:!0,hasM:!0,spatiaReference:o}):new A(n.map(l=>[l.x,l.y,l.z]),o);break}case"polyline":{const i=e,s=[],a=[],{hasZ:n,hasM:o}=e;let l=0;for(const c of i.paths)if(a.push([l,l+c.length]),l+=c.length,n&&o)for(const u of c)s.push({x:u[0],y:u[1],z:u[2],m:u[3]});else if(n)for(const u of c)s.push({x:u[0],y:u[1],z:u[2]});else if(o)for(const u of c)s.push({x:u[0],y:u[1],m:u[2]});else for(const u of c)s.push({x:u[0],y:u[1]});t.coordinates=s,t._exporter=(c,u)=>{const h=e.hasM?c.map(p=>[p.x,p.y,p.z,p.m]):c.map(p=>[p.x,p.y,p.z]),d=a.map(p=>h.slice(p[0],p[1]));return new ce({paths:d,hasM:e.hasM,hasZ:!0,spatialReference:u})};break}}return t}}class J{constructor(e,t){this.layer=e,this.options=t}}class ye extends J{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type="geometry"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach(t=>t.tile=null);else{const t=this.layer.tileInfo,i=t.lods[e].level;this.geometry.coordinates.forEach(s=>{s.tile=t.tileAt(i,s.x,s.y)})}}allElevationTilesFetched(){return!this.geometry.coordinates.some(e=>!e.elevationTile)}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){for(const t of this.geometry.coordinates)!t.elevationTile&&t.tile&&(t.elevationTile=e[t.tile.id])}remapTiles(e){for(const t of this.geometry.coordinates)t.tile=e[t.tile.id]}getTilesToFetch(){const e={},t=[];for(const i of this.geometry.coordinates){const s=i.tile;i.elevationTile||!i.tile||e[s.id]||(e[s.id]=s,t.push(s))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,()=>t.tile=null)}}class xe extends J{constructor(e,t,i,s){super(e,i),this.type="extent",this.elevationTiles=[],this.candidateTiles=[],this.fetchedCandidates=new Set,this.extent=t.intersection(e.fullExtent),this.maskExtents=s}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),s=Math.min(i,e);s<0?this.candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(s)}_maximumLodForRequests(e){const t=this.layer.tileInfo;if(!e)return t.lods.length-1;const i=this.extent;if(v(i))return-1;for(let s=t.lods.length-1;s>=0;s--){const a=t.lods[s],n=a.resolution*t.size[0],o=a.resolution*t.size[1];if(Math.ceil(i.width/n)*Math.ceil(i.height/o)<=e)return s}return-1}allElevationTilesFetched(){return this.candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this.fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this.candidateTiles){const i=e[t.id];i&&(this.fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this.candidateTiles=this._uniqueNonOverlappingTiles(this.candidateTiles.map(t=>e[t.id]))}getTilesToFetch(){return this.candidateTiles}forEachTileToFetch(e,t){const i=this.candidateTiles;this.candidateTiles=[],i.forEach(s=>{if(this.fetchedCandidates.has(s))return void(t&&t(s));let a=!1;e(s,()=>a=!0),a?t&&t(s):this.candidateTiles.push(s)}),this.candidateTiles=this._uniqueNonOverlappingTiles(this.candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},s=[];for(const n of e)i[n.id]?t&&t(n):(i[n.id]=n,s.push(n));const a=s.sort((n,o)=>n.level-o.level);return a.filter((n,o)=>{for(let l=0;l<o;l++)if(G(a[l].extent,n.extent))return t&&t(n),!1;return!0})}_selectCandidateTilesCoveringExtentAt(e){this.candidateTiles.length=0;const t=this.extent;if(v(t))return;const i=this.layer.tileInfo,s=i.lods[e],a=i.tileAt(s.level,t.xmin,t.ymin),n=s.resolution*i.size[0],o=s.resolution*i.size[1],l=Math.ceil((t.xmax-a.extent[0])/n),c=Math.ceil((t.ymax-a.extent[1])/o);for(let u=0;u<c;u++)for(let h=0;h<l;h++){const d={id:null,level:a.level,row:a.row-u,col:a.col+h};i.updateTileInfo(d),this._tileIsMasked(d)||this.candidateTiles.push(d)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some(t=>G(t,e.extent))}}function W(r,e){let t=r.lods.length-1;if(e>0){const i=r.lods.findIndex(s=>s.resolution<e);i===0?t=0:i>0&&(t=i-1)}return t}const g={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:"auto",minDemResolution:0};export{ge as ElevationQuery,x as GeometryDescriptor,ge as default,W as getFinestLodIndex};
